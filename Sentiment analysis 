{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "id": "QOxTo3MX2hqC"
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import librosa\n",
    "import numpy as np\n",
    "import speech_recognition as sr\n",
    "from transformers import pipeline\n",
    "import pyttsx3\n",
    "import torch\n",
    "import tensorflow as tf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "Aka02r_H2wMR",
    "outputId": "cea5d6da-d892-40f6-f784-dee5deed9579"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.4.0+cpu\n",
      "2.17.0\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "import tensorflow as tf\n",
    "\n",
    "print(torch.__version__)  # Check PyTorch version\n",
    "print(tf.__version__)     # Check TensorFlow version\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "id": "o836_-OG28Yy"
   },
   "outputs": [],
   "source": [
    "def text_to_speech(text, output_audio_file):\n",
    "    engine = pyttsx3.init()\n",
    "    engine.save_to_file(text, output_audio_file)\n",
    "    engine.runAndWait()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "id": "Hx8hvaZp2-a-"
   },
   "outputs": [],
   "source": [
    "def speech_to_text(audio_file):\n",
    "    recognizer = sr.Recognizer()\n",
    "    with sr.AudioFile(audio_file) as source:\n",
    "        audio_data = recognizer.record(source)\n",
    "        try:\n",
    "            text = recognizer.recognize_google(audio_data)\n",
    "            return text\n",
    "        except sr.UnknownValueError:\n",
    "            print(\"Speech Recognition could not understand audio\")\n",
    "        except sr.RequestError:\n",
    "            print(\"Could not request results from Google Speech Recognition service\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "id": "WTwvwY4f2_pz"
   },
   "outputs": [],
   "source": [
    "def extract_audio_features(audio_file):\n",
    "    y, sr = librosa.load(audio_file, sr=None)\n",
    "\n",
    "    # Extract pitch (fundamental frequency)\n",
    "    pitches, magnitudes = librosa.core.piptrack(y=y, sr=sr)\n",
    "\n",
    "    # Extract MFCC features\n",
    "    mfccs = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=13)\n",
    "\n",
    "    # Average pitch\n",
    "    avg_pitch = np.mean(pitches[pitches > 0])\n",
    "\n",
    "    return {\n",
    "        \"mfccs\": mfccs,\n",
    "        \"avg_pitch\": avg_pitch\n",
    "    }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 321,
     "referenced_widgets": [
      "cfae7adec6004f2581033d9e09207d9e",
      "6e0aa4fbce5543a790363bd889921cf5",
      "bb372bac164f41458e90d03045cf33a5",
      "a5fd31d53fa744889d97920f28255f1c",
      "aa031a66b98e42d983258ba0ba2346f7",
      "f07ada3e706a41fa895acaef1b8dbbd8",
      "c81c7f767ac4465abb9de1cf54ce15b3",
      "97cab477c0c34e02aa34437246464d7c",
      "17663b2286464fb9ae0eed7723e07694",
      "187d24de176f403bae84589da6bd4c53",
      "db8cf6116cd94b18bea64c992ab892d4",
      "f3feb06cd13a4abd8622933030f30064",
      "9608df2eed1c49aa8ea312a3abd4c0c1",
      "384fb861dbbf4f448cd9a361d165a39e",
      "776875522ba64d62a5acbf6807b646e5",
      "86e6795eccdf4daf8502819a88a6d421",
      "dcda7293eaad490098b37bda487506e6",
      "e4ce4cf630104b3c9f02c43ab4b07823",
      "777c56c93e5e4afc9c09c5d701971f7f",
      "dc5f4684542f482d89cf3d2794f07b73",
      "e98be0b4bf724afb989708d2b3412b7e",
      "ad42d00100bb4499a143f341bb3d251b",
      "3dac97b7ab924652858f0402389ee5bd",
      "ba4d80d70b2f47e18800606d3286df12",
      "5f1095339994462080f663d2e4f3c633",
      "581b6df773ab4e8a9af21489c227739f",
      "768c66a1ed66436aa1c341dfdfaa6c67",
      "dd3ca54ca79a4207ae73bdbb48b7ea14",
      "f706b1ff89d94a9fa24181084c1a3ba6",
      "471d001b6a2c4faa86d27d5701d714b4",
      "04bf2400278e46ef8a19935e50d8f487",
      "275f99291d294b35ade36b86f8549024",
      "f906b2834aaf4c238b6ac5406301c6c4",
      "2856e5109d334d84878f40b160ef81b2",
      "cf4d84cf5b384d6a91f259ceac69c217",
      "311a9ffefe444f5b9ba566c4d27ac4f4",
      "02746db0ee2e4811926d9faf3098d50f",
      "da9cf139fbdd47ba94d84b6ff9a2d51c",
      "47a7932be8244db9b4091aa7b21f524a",
      "b13fc2c885144a62ab85a52122c54e22",
      "369c23c1e1bc4ddaa76e06ef4555e6f4",
      "a0c562cf20944ae3b10cbc31db01055b",
      "9fb2d8182baa4dd1bd09f82c623d0f0b",
      "da1ee73e6f4b4f0f8af25dec5c1207e1"
     ]
    },
    "id": "uJi3-Q5y3BHK",
    "outputId": "d0dcf307-539e-45c6-a4e8-96909a814a30"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "No model was supplied, defaulted to distilbert/distilbert-base-uncased-finetuned-sst-2-english and revision af0f99b (https://huggingface.co/distilbert/distilbert-base-uncased-finetuned-sst-2-english).\n",
      "Using a pipeline without specifying a model name and revision in production is not recommended.\n"
     ]
    }
   ],
   "source": [
    "# Load sentiment analysis model\n",
    "sentiment_pipeline = pipeline('sentiment-analysis')\n",
    "\n",
    "def analyze_sentiment(text):\n",
    "    return sentiment_pipeline(text)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "id": "stmtsIhL3CqF"
   },
   "outputs": [],
   "source": [
    "def analyze_audio_emotion(audio_features):\n",
    "    avg_pitch = audio_features['avg_pitch']\n",
    "\n",
    "    if avg_pitch > 200:  # High pitch\n",
    "        return \"Stress or Anger\"\n",
    "    elif avg_pitch < 150:  # Low pitch\n",
    "        return \"Calm or Neutral\"\n",
    "    else:\n",
    "        return \"Neutral\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "id": "a2BUuMMQ3G_N"
   },
   "outputs": [],
   "source": [
    "audio_file = r\"C:\\Users\\mark kevin\\Downloads\\i will kill you.wav\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 321
    },
    "id": "0elxMy7c3Iq1",
    "outputId": "c1561500-35cf-4ff7-9310-b3cc7c02d445"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Transcribed Text: I will kill you\n",
      "Sentiment Analysis: [{'label': 'NEGATIVE', 'score': 0.9264494776725769}]\n",
      "Emotion Analysis: Stress or Anger\n",
      "The voice note might indicate deception or distress.\n"
     ]
    }
   ],
   "source": [
    "def assess_voice_evidence(audio_file):\n",
    "    # Step 1: Transcribe the voice note\n",
    "    transcribed_text = speech_to_text(audio_file)\n",
    "\n",
    "    # Step 2: Analyze sentiment of the text\n",
    "    sentiment_result = analyze_sentiment(transcribed_text)\n",
    "\n",
    "    # Step 3: Extract audio features and analyze tone/emotion\n",
    "    audio_features = extract_audio_features(audio_file)\n",
    "    emotion_result = analyze_audio_emotion(audio_features)\n",
    "\n",
    "    # Step 4: Combine and make assessment\n",
    "    print(f\"Transcribed Text: {transcribed_text}\")\n",
    "    print(f\"Sentiment Analysis: {sentiment_result}\")\n",
    "    print(f\"Emotion Analysis: {emotion_result}\")\n",
    "\n",
    "    # Combine both results\n",
    "    if sentiment_result[0]['label'] == 'NEGATIVE' and emotion_result == \"Stress or Anger\":\n",
    "        print(\"The voice note might indicate deception or distress.\")\n",
    "    elif sentiment_result[0]['label'] == 'POSITIVE' and emotion_result == \"Calm or Neutral\":\n",
    "        print(\"The voice note seems genuine and calm.\")\n",
    "    else:\n",
    "        print(\"The voice note requires further investigation.\")\n",
    "\n",
    "# Example usage after uploading the audio file\n",
    "assess_voice_evidence(audio_file)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "a307hv9W4CyX",
    "outputId": "e99cadff-ec76-48cd-e85f-fbdeb18f8f28"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Transcribed Text: I will kill you\n",
      "Sentiment Analysis: [{'label': 'NEGATIVE', 'score': 0.9264494776725769}]\n",
      "Emotion Analysis: Stress or Anger\n",
      "The voice note might indicate 'NEGATIVE' sentiment and a tone of 'Stress or Anger' based on the audio.\n"
     ]
    }
   ],
   "source": [
    "# Step 1: Final output that combines transcribed text, sentiment, and emotion\n",
    "def assess_voice_evidence(audio_file):\n",
    "    # Step 1: Transcribe the voice note\n",
    "    transcribed_text = speech_to_text(audio_file)\n",
    "\n",
    "    if transcribed_text is not None:\n",
    "        print(f\"Transcribed Text: {transcribed_text}\")\n",
    "\n",
    "        # Step 2: Analyze sentiment of the text\n",
    "        sentiment_result = analyze_sentiment(transcribed_text)\n",
    "        print(f\"Sentiment Analysis: {sentiment_result}\")\n",
    "\n",
    "        # Step 3: Extract audio features and analyze tone/emotion\n",
    "        audio_features = extract_audio_features(audio_file)\n",
    "        emotion_result = analyze_audio_emotion(audio_features)\n",
    "        print(f\"Emotion Analysis: {emotion_result}\")\n",
    "\n",
    "        # Step 4: Combine the results to assess the overall evidence\n",
    "        final_assessment = f\"The voice note might indicate '{sentiment_result[0]['label']}' sentiment and a tone of '{emotion_result}' based on the audio.\"\n",
    "        print(final_assessment)\n",
    "\n",
    "    else:\n",
    "        print(\"Unable to transcribe the audio or analyze sentiment.\")\n",
    "\n",
    "# Example usage\n",
    "audio_file = r\"C:\\Users\\mark kevin\\Downloads\\i will kill you.wav\" # Assuming you have already uploaded the audio\n",
    "assess_voice_evidence(audio_file)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 633
    },
    "id": "qJnT1R-dBY7D",
    "outputId": "4c4413ac-bae8-4b94-a265-0fa90493cb13"
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import librosa\n",
    "import speech_recognition as sr\n",
    "\n",
    "# Function to transcribe audio to text (not used for visualization)\n",
    "def speech_to_text(audio_file):\n",
    "    recognizer = sr.Recognizer()\n",
    "    with sr.AudioFile(audio_file) as source:\n",
    "        audio_data = recognizer.record(source)\n",
    "\n",
    "    try:\n",
    "        transcribed_text = recognizer.recognize_google(audio_data)\n",
    "        return transcribed_text\n",
    "    except sr.UnknownValueError:\n",
    "        return None\n",
    "    except sr.RequestError as e:\n",
    "        return None\n",
    "\n",
    "# Function to extract audio features\n",
    "def extract_audio_features(audio_file):\n",
    "    y, sr = librosa.load(audio_file, sr=None)\n",
    "    pitches, magnitudes = librosa.core.piptrack(y=y, sr=sr)\n",
    "    avg_pitch = np.mean(pitches[pitches > 0])\n",
    "    return {\n",
    "        \"pitches\": pitches,\n",
    "        \"magnitudes\": magnitudes,\n",
    "        \"avg_pitch\": avg_pitch\n",
    "    }\n",
    "\n",
    "# Function to plot pitch\n",
    "def plot_pitch(audio_features):\n",
    "    pitches = audio_features['pitches']\n",
    "    pitches_flat = pitches[pitches > 0].flatten()\n",
    "    times = np.linspace(0, len(pitches_flat), num=len(pitches_flat))\n",
    "\n",
    "    plt.figure(figsize=(12, 6))\n",
    "    plt.plot(times, pitches_flat, label='Pitch', color='b')\n",
    "    plt.title('Pitch over Time')\n",
    "    plt.xlabel('Frames')\n",
    "    plt.ylabel('Pitch (Hz)')\n",
    "    plt.legend()\n",
    "    plt.grid()\n",
    "    plt.show()\n",
    "\n",
    "# Function to assess voice evidence (visualization only)\n",
    "def assess_voice_evidence(audio_file):\n",
    "    # Extract audio features\n",
    "    audio_features = extract_audio_features(audio_file)\n",
    "\n",
    "    # Plotting pitch\n",
    "    plot_pitch(audio_features)\n",
    "\n",
    "# Example usage\n",
    "audio_file = r\"C:\\Users\\mark kevin\\Downloads\\i will kill you.wav\" # Replace with your audio file path\n",
    "assess_voice_evidence(audio_file)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "id": "9PHeTXZ7EtVG"
   },
   "outputs": [],
   "source": [
    "def convert_model_to_tflite():\n",
    "    # Load the Hugging Face model\n",
    "    from transformers import TFAutoModelForSequenceClassification\n",
    "    model_name = \"distilbert-base-uncased-finetuned-sst-2-english\"  # Change to your model\n",
    "    model = TFAutoModelForSequenceClassification.from_pretrained(model_name)\n",
    "\n",
    "    # Save the model\n",
    "    tf_model_path = \"sentiment_model\"\n",
    "    model.save_pretrained(tf_model_path)\n",
    "    tf.saved_model.save(model, tf_model_path)\n",
    "\n",
    "    # Convert to TFLite\n",
    "    converter = tf.lite.TFLiteConverter.from_saved_model(tf_model_path)\n",
    "    tflite_model = converter.convert()\n",
    "\n",
    "    # Save the TFLite model\n",
    "    tflite_model_path = \"sentiment_model.tflite\"\n",
    "    with open(tflite_model_path, 'wb') as f:\n",
    "        f.write(tflite_model)\n",
    "\n",
    "    print(f\"TFLite model saved to {tflite_model_path}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {
     "referenced_widgets": [
      "95b8af9e9a8c409883e6d79f6327b50e",
      "9564ff3a54e7457990743f1f4329b58c"
     ]
    },
    "id": "iG9wYELC2tQz",
    "outputId": "d34df44e-08cb-4c50-c406-16900adec56f"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From C:\\Users\\mark kevin\\anaconda3\\Lib\\site-packages\\tf_keras\\src\\losses.py:2976: The name tf.losses.sparse_softmax_cross_entropy is deprecated. Please use tf.compat.v1.losses.sparse_softmax_cross_entropy instead.\n",
      "\n",
      "WARNING:tensorflow:From C:\\Users\\mark kevin\\anaconda3\\Lib\\site-packages\\tf_keras\\src\\backend.py:873: The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead.\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "All PyTorch model weights were used when initializing TFDistilBertForSequenceClassification.\n",
      "\n",
      "All the weights of TFDistilBertForSequenceClassification were initialized from the PyTorch model.\n",
      "If your task is similar to the task the model of the checkpoint was trained on, you can already use TFDistilBertForSequenceClassification for predictions without further training.\n"
     ]
    },
    {
     "ename": "NameError",
     "evalue": "name 'tf' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[2], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m convert_model_to_tflite()\n",
      "Cell \u001b[1;32mIn[1], line 10\u001b[0m, in \u001b[0;36mconvert_model_to_tflite\u001b[1;34m()\u001b[0m\n\u001b[0;32m      8\u001b[0m tf_model_path \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124msentiment_model\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m      9\u001b[0m model\u001b[38;5;241m.\u001b[39msave_pretrained(tf_model_path)\n\u001b[1;32m---> 10\u001b[0m tf\u001b[38;5;241m.\u001b[39msaved_model\u001b[38;5;241m.\u001b[39msave(model, tf_model_path)\n\u001b[0;32m     12\u001b[0m \u001b[38;5;66;03m# Convert to TFLite\u001b[39;00m\n\u001b[0;32m     13\u001b[0m converter \u001b[38;5;241m=\u001b[39m tf\u001b[38;5;241m.\u001b[39mlite\u001b[38;5;241m.\u001b[39mTFLiteConverter\u001b[38;5;241m.\u001b[39mfrom_saved_model(tf_model_path)\n",
      "\u001b[1;31mNameError\u001b[0m: name 'tf' is not defined"
     ]
    }
   ],
   "source": [
    "convert_model_to_tflite()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "Db21EPrq2tQ0",
    "outputId": "5180328f-9d00-40ea-da65-d4796163a660"
   },
   "outputs": [],
   "source": [
    "pip install librosa numpy SpeechRecognition transformers pyttsx3 torch tensorflow gradio"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "yDBfwxde3UgE"
   },
   "outputs": [],
   "source": [
    "import gradio as gr\n",
    "import librosa\n",
    "import numpy as np\n",
    "import speech_recognition as sr\n",
    "from transformers import pipeline\n",
    "import pyttsx3\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Function to transcribe speech to text\n",
    "def speech_to_text(audio_file):\n",
    "    recognizer = sr.Recognizer()\n",
    "    with sr.AudioFile(audio_file) as source:\n",
    "        audio_data = recognizer.record(source)\n",
    "    try:\n",
    "        return recognizer.recognize_google(audio_data)\n",
    "    except sr.UnknownValueError:\n",
    "        return \"Unable to transcribe the audio.\"\n",
    "    except sr.RequestError:\n",
    "        return \"Error requesting results from Google Speech Recognition.\"\n",
    "\n",
    "# Function to analyze sentiment of the transcribed text\n",
    "def analyze_sentiment(text):\n",
    "    sentiment_pipeline = pipeline('sentiment-analysis')\n",
    "    return sentiment_pipeline(text)[0]['label']\n",
    "\n",
    "# Function to extract audio features and analyze tone/emotion\n",
    "def extract_audio_features(audio_file):\n",
    "    y, sr = librosa.load(audio_file, sr=None)\n",
    "    pitches, magnitudes = librosa.core.piptrack(y=y, sr=sr)\n",
    "    avg_pitch = np.mean(pitches[pitches > 0])\n",
    "    return avg_pitch, pitches  # Return both the average pitch and pitch data for plotting\n",
    "\n",
    "def analyze_audio_emotion(audio_features):\n",
    "    avg_pitch = audio_features\n",
    "    if avg_pitch > 300:  # High pitch\n",
    "        return \"Stress or Anger\"\n",
    "    elif avg_pitch < 150:  # Low pitch\n",
    "        return \"Calm or Neutral\"\n",
    "    else:\n",
    "        return \"Neutral\"\n",
    "\n",
    "# Function to plot pitch data\n",
    "def plot_pitch(pitches):\n",
    "    pitches_flat = pitches[pitches > 0].flatten()\n",
    "    times = np.linspace(0, len(pitches_flat), num=len(pitches_flat))\n",
    "\n",
    "    plt.figure(figsize=(12, 6))\n",
    "    plt.plot(times, pitches_flat, label='Pitch', color='b')\n",
    "    plt.title('Pitch over Time')\n",
    "    plt.xlabel('Frames')\n",
    "    plt.ylabel('Pitch (Hz)')\n",
    "    plt.legend()\n",
    "    plt.grid()\n",
    "    \n",
    "    # Save plot as an image\n",
    "    plt_image_path = \"pitch_plot.png\"\n",
    "    plt.savefig(plt_image_path)\n",
    "    plt.close()\n",
    "    \n",
    "    return plt_image_path\n",
    "\n",
    "# Main function to assess the voice evidence\n",
    "def assess_voice_evidence(audio_file):\n",
    "    # Step 1: Transcribe the voice note\n",
    "    transcribed_text = speech_to_text(audio_file)\n",
    "\n",
    "    # Step 2: Analyze sentiment of the text\n",
    "    sentiment_result = analyze_sentiment(transcribed_text)\n",
    "\n",
    "    # Step 3: Extract audio features and analyze tone/emotion\n",
    "    audio_features, pitches = extract_audio_features(audio_file)\n",
    "    emotion_result = analyze_audio_emotion(audio_features)\n",
    "\n",
    "    # Step 4: Plot the pitch graph\n",
    "    pitch_plot_path = plot_pitch(pitches)\n",
    "\n",
    "    # Final assessment\n",
    "    final_assessment = f\"Transcribed Text: {transcribed_text}\\nSentiment Analysis: {sentiment_result}\\nEmotion Analysis: {emotion_result}\"\n",
    "\n",
    "    if sentiment_result == 'NEGATIVE' and emotion_result == \"Stress or Anger\":\n",
    "        final_assessment += \"\\nThe voice note might indicate deception or distress.\"\n",
    "    elif sentiment_result == 'POSITIVE' and emotion_result == \"Calm or Neutral\":\n",
    "        final_assessment += \"\\nThe voice note seems genuine and calm.\"\n",
    "    else:\n",
    "        final_assessment += \"\\nThe voice note requires further investigation.\"\n",
    "\n",
    "    return final_assessment, pitch_plot_path  # Return both text and the pitch graph\n",
    "\n",
    "# Gradio interface\n",
    "iface = gr.Interface(\n",
    "    fn=assess_voice_evidence,                     # The function to call\n",
    "    inputs=gr.Audio(type=\"filepath\"),  # Audio input\n",
    "    outputs=[gr.Textbox(), gr.Image(type=\"filepath\")],  # Text and image outputs\n",
    "    title=\"Voice Evidence Sentiment and Emotion Analysis\",\n",
    "    description=\"Upload an audio file to analyze its sentiment and emotion based on speech characteristics and view the pitch graph.\"\n",
    ")\n",
    "\n",
    "# Launch the Gradio interface\n",
    "iface.launch()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gradio as gr\n",
    "import librosa\n",
    "import numpy as np\n",
    "import speech_recognition as sr\n",
    "from transformers import pipeline\n",
    "import pyttsx3\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Function to transcribe speech to text\n",
    "def speech_to_text(audio_file):\n",
    "    recognizer = sr.Recognizer()\n",
    "    with sr.AudioFile(audio_file) as source:\n",
    "        audio_data = recognizer.record(source)\n",
    "    try:\n",
    "        return recognizer.recognize_google(audio_data)\n",
    "    except sr.UnknownValueError:\n",
    "        return \"Unable to transcribe the audio.\"\n",
    "    except sr.RequestError:\n",
    "        return \"Error requesting results from Google Speech Recognition.\"\n",
    "\n",
    "# Function to analyze sentiment of the transcribed text\n",
    "def analyze_sentiment(text):\n",
    "    sentiment_pipeline = pipeline('sentiment-analysis')\n",
    "    return sentiment_pipeline(text)[0]['label']\n",
    "\n",
    "# Function to extract audio features and analyze tone/emotion\n",
    "def extract_audio_features(audio_file):\n",
    "    y, sr = librosa.load(audio_file, sr=None)\n",
    "    pitches, magnitudes = librosa.core.piptrack(y=y, sr=sr)\n",
    "    avg_pitch = np.mean(pitches[pitches > 0])\n",
    "    return avg_pitch, pitches  # Return both the average pitch and pitch data for plotting\n",
    "\n",
    "def analyze_audio_emotion(audio_features):\n",
    "    avg_pitch = audio_features\n",
    "    if avg_pitch > 200:  # High pitch\n",
    "        return \"Stress or Anger\"\n",
    "    elif avg_pitch < 150:  # Low pitch\n",
    "        return \"Calm or Neutral\"\n",
    "    else:\n",
    "        return \"Neutral\"\n",
    "\n",
    "# Function to plot pitch data\n",
    "def plot_pitch(pitches):\n",
    "    pitches_flat = pitches[pitches > 0].flatten()\n",
    "    times = np.linspace(0, len(pitches_flat), num=len(pitches_flat))\n",
    "\n",
    "    plt.figure(figsize=(12, 6))\n",
    "    plt.plot(times, pitches_flat, label='Pitch', color='b')\n",
    "    plt.title('Pitch over Time')\n",
    "    plt.xlabel('Frames')\n",
    "    plt.ylabel('Pitch (Hz)')\n",
    "    plt.legend()\n",
    "    plt.grid()\n",
    "    \n",
    "    # Save plot as an image\n",
    "    plt_image_path = \"pitch_plot.png\"\n",
    "    plt.savefig(plt_image_path)\n",
    "    plt.close()\n",
    "    \n",
    "    return plt_image_path\n",
    "\n",
    "# Main function to assess the voice evidence\n",
    "def assess_voice_evidence(audio_file):\n",
    "    # Step 1: Transcribe the voice note\n",
    "    transcribed_text = speech_to_text(audio_file)\n",
    "\n",
    "    # Step 2: Analyze sentiment of the text\n",
    "    sentiment_result = analyze_sentiment(transcribed_text)\n",
    "\n",
    "    # Step 3: Extract audio features and analyze tone/emotion\n",
    "    audio_features, pitches = extract_audio_features(audio_file)\n",
    "    emotion_result = analyze_audio_emotion(audio_features)\n",
    "\n",
    "    # Step 4: Plot the pitch graph\n",
    "    pitch_plot_path = plot_pitch(pitches)\n",
    "\n",
    "    # Final assessment\n",
    "    final_assessment = f\"Transcribed Text: {transcribed_text}\\nSentiment Analysis: {sentiment_result}\\nEmotion Analysis: {emotion_result}\"\n",
    "\n",
    "    if sentiment_result == 'NEGATIVE' and emotion_result == \"Stress or Anger\":\n",
    "        final_assessment += \"\\nThe voice note might indicate deception or distress.\"\n",
    "    elif sentiment_result == 'POSITIVE' and emotion_result == \"Calm or Neutral\":\n",
    "        final_assessment += \"\\nThe voice note seems genuine and calm.\"\n",
    "    else:\n",
    "        final_assessment += \"\\nThe voice note requires further investigation.\"\n",
    "\n",
    "    return final_assessment, pitch_plot_path  # Return both text and the pitch graph\n",
    "\n",
    "# Gradio interface\n",
    "iface = gr.Interface(\n",
    "    fn=assess_voice_evidence,                     # The function to call\n",
    "    inputs=gr.Audio(type=\"filepath\"),  # Audio input\n",
    "    outputs=[gr.Textbox(), gr.Image(type=\"filepath\")],  # Text and image outputs\n",
    "    title=\"Voice Evidence Sentiment and Emotion Analysis\",\n",
    "    description=\"Upload an audio file to analyze its sentiment and emotion based on speech characteristics and view the pitch graph.\"\n",
    ")\n",
    "\n",
    "# Launch the Gradio interface\n",
    "iface.launch()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gradio as gr\n",
    "import librosa\n",
    "import numpy as np\n",
    "import speech_recognition as sr\n",
    "from transformers import pipeline\n",
    "import pyttsx3\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Function to transcribe speech to text\n",
    "def speech_to_text(audio_file):\n",
    "    recognizer = sr.Recognizer()\n",
    "    with sr.AudioFile(audio_file) as source:\n",
    "        audio_data = recognizer.record(source)\n",
    "    try:\n",
    "        return recognizer.recognize_google(audio_data)\n",
    "    except sr.UnknownValueError:\n",
    "        return \"Unable to transcribe the audio.\"\n",
    "    except sr.RequestError:\n",
    "        return \"Error requesting results from Google Speech Recognition.\"\n",
    "\n",
    "# Function to analyze sentiment of the transcribed text\n",
    "def analyze_sentiment(text):\n",
    "    sentiment_pipeline = pipeline('sentiment-analysis')\n",
    "    return sentiment_pipeline(text)[0]['label']\n",
    "\n",
    "# Function to extract audio features and analyze tone/emotion\n",
    "def extract_audio_features(audio_file):\n",
    "    y, sr = librosa.load(audio_file, sr=None)\n",
    "    pitches, magnitudes = librosa.core.piptrack(y=y, sr=sr)\n",
    "    avg_pitch = np.mean(pitches[pitches > 0])\n",
    "    return avg_pitch, pitches, y, sr  # Return audio signal (y) and sampling rate (sr) for spectrogram\n",
    "\n",
    "def analyze_audio_emotion(audio_features):\n",
    "    avg_pitch = audio_features\n",
    "    if avg_pitch > 3000:  # High pitch\n",
    "        return \"Stress or Anger\"\n",
    "    elif avg_pitch < 150:  # Low pitch\n",
    "        return \"Calm or Neutral\"\n",
    "    else:\n",
    "        return \"Neutral\"\n",
    "\n",
    "# Function to plot pitch data\n",
    "def plot_pitch(pitches):\n",
    "    pitches_flat = pitches[pitches > 0].flatten()\n",
    "    times = np.linspace(0, len(pitches_flat), num=len(pitches_flat))\n",
    "\n",
    "    plt.figure(figsize=(12, 6))\n",
    "    plt.plot(times, pitches_flat, label='Pitch', color='b')\n",
    "    plt.title('Pitch over Time')\n",
    "    plt.xlabel('Frames')\n",
    "    plt.ylabel('Pitch (Hz)')\n",
    "    plt.legend()\n",
    "    plt.grid()\n",
    "    \n",
    "    # Save plot as an image\n",
    "    plt_image_path = \"pitch_plot.png\"\n",
    "    plt.savefig(plt_image_path)\n",
    "    plt.close()\n",
    "    \n",
    "    return plt_image_path\n",
    "\n",
    "# Function to plot a spectrogram\n",
    "def plot_spectrogram(audio_signal, sr):\n",
    "    # Create a spectrogram\n",
    "    D = librosa.amplitude_to_db(np.abs(librosa.stft(audio_signal)), ref=np.max)\n",
    "\n",
    "    plt.figure(figsize=(12, 6))\n",
    "    librosa.display.specshow(D, x_axis='time', y_axis='log', sr=sr)\n",
    "    plt.colorbar(format='%+2.0f dB')\n",
    "    plt.title('Spectrogram')\n",
    "    \n",
    "    # Save plot as an image\n",
    "    spectrogram_image_path = \"spectrogram_plot.png\"\n",
    "    plt.savefig(spectrogram_image_path)\n",
    "    plt.close()\n",
    "    \n",
    "    return spectrogram_image_path\n",
    "\n",
    "# Main function to assess the voice evidence\n",
    "def assess_voice_evidence(audio_file):\n",
    "    # Step 1: Transcribe the voice note\n",
    "    transcribed_text = speech_to_text(audio_file)\n",
    "\n",
    "    # Step 2: Analyze sentiment of the text\n",
    "    sentiment_result = analyze_sentiment(transcribed_text)\n",
    "\n",
    "    # Step 3: Extract audio features and analyze tone/emotion\n",
    "    audio_features, pitches, y, sr = extract_audio_features(audio_file)\n",
    "    emotion_result = analyze_audio_emotion(audio_features)\n",
    "\n",
    "    # Step 4: Plot the pitch graph\n",
    "    pitch_plot_path = plot_pitch(pitches)\n",
    "\n",
    "    # Step 5: Plot the spectrogram\n",
    "    spectrogram_plot_path = plot_spectrogram(y, sr)\n",
    "\n",
    "    # Final assessment\n",
    "    final_assessment = f\"Transcribed Text: {transcribed_text}\\nSentiment Analysis: {sentiment_result}\\nEmotion Analysis: {emotion_result}\"\n",
    "\n",
    "    if sentiment_result == 'NEGATIVE' and emotion_result == \"Stress or Anger\":\n",
    "        final_assessment += \"\\nThe voice note might indicate deception or distress.\"\n",
    "    elif sentiment_result == 'POSITIVE' and emotion_result == \"Calm or Neutral\":\n",
    "        final_assessment += \"\\nThe voice note seems genuine and calm.\"\n",
    "    else:\n",
    "        final_assessment += \"\\nThe voice note requires further investigation.\"\n",
    "\n",
    "    return final_assessment, pitch_plot_path, spectrogram_plot_path  # Return both text and graphs\n",
    "\n",
    "# Gradio interface\n",
    "iface = gr.Interface(\n",
    "    fn=assess_voice_evidence,                     # The function to call\n",
    "    inputs=gr.Audio(type=\"filepath\"),  # Audio input\n",
    "    outputs=[gr.Textbox(), gr.Image(type=\"filepath\"), gr.Image(type=\"filepath\")],  # Text and two image outputs\n",
    "    title=\"Voice Evidence Sentiment and Emotion Analysis\",\n",
    "    description=\"Upload an audio file to analyze its sentiment and emotion based on speech characteristics, view the pitch graph and spectrogram.\"\n",
    ")\n",
    "\n",
    "# Launch the Gradio interface\n",
    "iface.launch()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gradio as gr\n",
    "import librosa\n",
    "import numpy as np\n",
    "import speech_recognition as sr\n",
    "from transformers import pipeline\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Function to transcribe speech to text\n",
    "def speech_to_text(audio_file):\n",
    "    recognizer = sr.Recognizer()\n",
    "    with sr.AudioFile(audio_file) as source:\n",
    "        audio_data = recognizer.record(source)\n",
    "    try:\n",
    "        return recognizer.recognize_google(audio_data)\n",
    "    except sr.UnknownValueError:\n",
    "        return \"Unable to transcribe the audio.\"\n",
    "    except sr.RequestError:\n",
    "        return \"Error requesting results from Google Speech Recognition.\"\n",
    "\n",
    "# Function to analyze sentiment of the transcribed text\n",
    "def analyze_sentiment(text):\n",
    "    sentiment_pipeline = pipeline('sentiment-analysis')\n",
    "    return sentiment_pipeline(text)[0]['label']\n",
    "\n",
    "# Function to extract audio features\n",
    "def extract_audio_features(audio_file):\n",
    "    y, sr = librosa.load(audio_file, sr=None)\n",
    "    pitches, magnitudes = librosa.core.piptrack(y=y, sr=sr)\n",
    "    avg_pitch = np.mean(pitches[pitches > 0])\n",
    "    return avg_pitch, pitches, y, sr  # Return audio signal (y) and sampling rate (sr) for spectrogram\n",
    "\n",
    "# Function to plot pitch data\n",
    "def plot_pitch(pitches):\n",
    "    pitches_flat = pitches[pitches > 0].flatten()\n",
    "    times = np.linspace(0, len(pitches_flat), num=len(pitches_flat))\n",
    "\n",
    "    plt.figure(figsize=(12, 6))\n",
    "    plt.plot(times, pitches_flat, label='Pitch', color='b')\n",
    "    plt.title('Pitch over Time')\n",
    "    plt.xlabel('Frames')\n",
    "    plt.ylabel('Pitch (Hz)')\n",
    "    plt.legend()\n",
    "    plt.grid()\n",
    "    \n",
    "    # Save plot as an image\n",
    "    plt_image_path = \"pitch_plot.png\"\n",
    "    plt.savefig(plt_image_path)\n",
    "    plt.close()\n",
    "    \n",
    "    return plt_image_path\n",
    "\n",
    "# Function to plot a spectrogram\n",
    "def plot_spectrogram(audio_signal, sr):\n",
    "    # Create a spectrogram\n",
    "    D = librosa.amplitude_to_db(np.abs(librosa.stft(audio_signal)), ref=np.max)\n",
    "\n",
    "    plt.figure(figsize=(12, 6))\n",
    "    librosa.display.specshow(D, x_axis='time', y_axis='log', sr=sr)\n",
    "    plt.colorbar(format='%+2.0f dB')\n",
    "    plt.title('Spectrogram')\n",
    "    \n",
    "    # Save plot as an image\n",
    "    spectrogram_image_path = \"spectrogram_plot.png\"\n",
    "    plt.savefig(spectrogram_image_path)\n",
    "    plt.close()\n",
    "    \n",
    "    return spectrogram_image_path\n",
    "\n",
    "# Main function to assess the voice evidence\n",
    "def assess_voice_evidence(audio_file):\n",
    "    # Step 1: Transcribe the voice note\n",
    "    transcribed_text = speech_to_text(audio_file)\n",
    "\n",
    "    # Step 2: Analyze sentiment of the text\n",
    "    sentiment_result = analyze_sentiment(transcribed_text)\n",
    "\n",
    "    # Step 3: Extract audio features\n",
    "    avg_pitch, pitches, y, sr = extract_audio_features(audio_file)\n",
    "\n",
    "    # Step 4: Plot the pitch graph\n",
    "    pitch_plot_path = plot_pitch(pitches)\n",
    "\n",
    "    # Step 5: Plot the spectrogram\n",
    "    spectrogram_plot_path = plot_spectrogram(y, sr)\n",
    "\n",
    "    # Final assessment\n",
    "    final_assessment = f\"Transcribed Text: {transcribed_text}\\nSentiment Analysis: {sentiment_result}\\nPitch Analysis Completed.\"\n",
    "    \n",
    "    return final_assessment, pitch_plot_path, spectrogram_plot_path  # Return both text and graphs\n",
    "\n",
    "# Gradio interface\n",
    "iface = gr.Interface(\n",
    "    fn=assess_voice_evidence,                     # The function to call\n",
    "    inputs=gr.Audio(type=\"filepath\"),  # Audio input\n",
    "    outputs=[gr.Textbox(), gr.Image(type=\"filepath\"), gr.Image(type=\"filepath\")],  # Text and two image outputs\n",
    "    title=\"Voice Evidence Sentiment and Audio Analysis\",\n",
    "    description=\"Upload an audio file to analyze its sentiment and view the pitch graph and spectrogram.\"\n",
    ")\n",
    "\n",
    "# Launch the Gradio interface\n",
    "iface.launch()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gradio as gr\n",
    "import librosa\n",
    "import numpy as np\n",
    "import speech_recognition as sr\n",
    "from transformers import pipeline\n",
    "from diffusers import DiffusionPipeline\n",
    "import torch\n",
    "\n",
    "# Initialize Stable Diffusion model\n",
    "access_token = \"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\"\n",
    "pipeline = DiffusionPipeline.from_pretrained(\n",
    "    \"stabilityai/stable-diffusion-xl-base-1.0\",\n",
    "    torch_dtype=torch.float16,\n",
    "    use_auth_token=access_token\n",
    ").to(\"cuda\")\n",
    "\n",
    "# Function to transcribe speech to text\n",
    "def speech_to_text(audio_file):\n",
    "    recognizer = sr.Recognizer()\n",
    "    with sr.AudioFile(audio_file) as source:\n",
    "        audio_data = recognizer.record(source)\n",
    "    try:\n",
    "        return recognizer.recognize_google(audio_data)\n",
    "    except sr.UnknownValueError:\n",
    "        return \"Unable to transcribe the audio.\"\n",
    "    except sr.RequestError:\n",
    "        return \"Error requesting results from Google Speech Recognition.\"\n",
    "\n",
    "# Function to analyze sentiment of the transcribed text\n",
    "def analyze_sentiment(text):\n",
    "    sentiment_pipeline = pipeline('sentiment-analysis')\n",
    "    return sentiment_pipeline(text)[0]['label']\n",
    "\n",
    "# Function to extract audio features\n",
    "def extract_audio_features(audio_file):\n",
    "    y, sr = librosa.load(audio_file, sr=None)\n",
    "    pitches, magnitudes = librosa.core.piptrack(y=y, sr=sr)\n",
    "    avg_pitch = np.mean(pitches[pitches > 0])\n",
    "    return avg_pitch, pitches, y, sr  # Return audio signal (y) and sampling rate (sr) for spectrogram\n",
    "\n",
    "# Function to plot pitch data\n",
    "def plot_pitch(pitches):\n",
    "    pitches_flat = pitches[pitches > 0].flatten()\n",
    "    times = np.linspace(0, len(pitches_flat), num=len(pitches_flat))\n",
    "\n",
    "    plt.figure(figsize=(12, 6))\n",
    "    plt.plot(times, pitches_flat, label='Pitch', color='b')\n",
    "    plt.title('Pitch over Time')\n",
    "    plt.xlabel('Frames')\n",
    "    plt.ylabel('Pitch (Hz)')\n",
    "    plt.legend()\n",
    "    plt.grid()\n",
    "    \n",
    "    # Save plot as an image\n",
    "    plt_image_path = \"pitch_plot.png\"\n",
    "    plt.savefig(plt_image_path)\n",
    "    plt.close()\n",
    "    \n",
    "    return plt_image_path\n",
    "\n",
    "# Function to plot a spectrogram\n",
    "def plot_spectrogram(audio_signal, sr):\n",
    "    # Create a spectrogram\n",
    "    D = librosa.amplitude_to_db(np.abs(librosa.stft(audio_signal)), ref=np.max)\n",
    "\n",
    "    plt.figure(figsize=(12, 6))\n",
    "    librosa.display.specshow(D, x_axis='time', y_axis='log', sr=sr)\n",
    "    plt.colorbar(format='%+2.0f dB')\n",
    "    plt.title('Spectrogram')\n",
    "    \n",
    "    # Save plot as an image\n",
    "    spectrogram_image_path = \"spectrogram_plot.png\"\n",
    "    plt.savefig(spectrogram_image_path)\n",
    "    plt.close()\n",
    "    \n",
    "    return spectrogram_image_path\n",
    "\n",
    "# Function to generate an image based on transcribed text\n",
    "def generate_image(prompt):\n",
    "    image = pipeline(prompt).images[0]\n",
    "    return image\n",
    "\n",
    "# Main function to assess the voice evidence and generate an image\n",
    "def assess_voice_and_generate_image(audio_file):\n",
    "    # Step 1: Transcribe the voice note\n",
    "    transcribed_text = speech_to_text(audio_file)\n",
    "\n",
    "    # Step 2: Analyze sentiment of the text\n",
    "    sentiment_result = analyze_sentiment(transcribed_text)\n",
    "\n",
    "    # Step 3: Extract audio features\n",
    "    avg_pitch, pitches, y, sr = extract_audio_features(audio_file)\n",
    "\n",
    "    # Step 4: Plot the pitch graph\n",
    "    pitch_plot_path = plot_pitch(pitches)\n",
    "\n",
    "    # Step 5: Plot the spectrogram\n",
    "    spectrogram_plot_path = plot_spectrogram(y, sr)\n",
    "\n",
    "    # Step 6: Generate an image using the transcribed text\n",
    "    generated_image = generate_image(transcribed_text)\n",
    "\n",
    "    # Final assessment\n",
    "    final_assessment = f\"Transcribed Text: {transcribed_text}\\nSentiment Analysis: {sentiment_result}\\nPitch Analysis Completed.\"\n",
    "\n",
    "    return final_assessment, pitch_plot_path, spectrogram_plot_path, generated_image\n",
    "\n",
    "# Gradio interface\n",
    "iface = gr.Interface(\n",
    "    fn=assess_voice_and_generate_image,\n",
    "    inputs=gr.Audio(type=\"filepath\"),  # Audio input\n",
    "    outputs=[\n",
    "        gr.Textbox(label=\"Analysis Result\"),  # Transcribed text and sentiment\n",
    "        gr.Image(type=\"filepath\", label=\"Pitch Graph\"),  # Pitch graph\n",
    "        gr.Image(type=\"filepath\", label=\"Spectrogram\"),  # Spectrogram\n",
    "        gr.Image(type=\"pil\", label=\"Generated Image\")  # Generated image\n",
    "    ],\n",
    "    title=\"Voice Evidence Analysis and Image Generation\",\n",
    "    description=\"Upload an audio file to analyze its sentiment, view pitch and spectrogram plots, and generate an image based on the transcribed text.\"\n",
    ")\n",
    "\n",
    "# Launch the Gradio interface\n",
    "iface.launch()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting diffusers\n",
      "  Downloading diffusers-0.31.0-py3-none-any.whl.metadata (18 kB)\n",
      "Requirement already satisfied: importlib-metadata in c:\\users\\mark kevin\\anaconda3\\lib\\site-packages (from diffusers) (7.0.1)\n",
      "Requirement already satisfied: filelock in c:\\users\\mark kevin\\anaconda3\\lib\\site-packages (from diffusers) (3.13.1)\n",
      "Requirement already satisfied: huggingface-hub>=0.23.2 in c:\\users\\mark kevin\\anaconda3\\lib\\site-packages (from diffusers) (0.26.2)\n",
      "Requirement already satisfied: numpy in c:\\users\\mark kevin\\anaconda3\\lib\\site-packages (from diffusers) (1.26.4)\n",
      "Requirement already satisfied: regex!=2019.12.17 in c:\\users\\mark kevin\\anaconda3\\lib\\site-packages (from diffusers) (2023.10.3)\n",
      "Requirement already satisfied: requests in c:\\users\\mark kevin\\anaconda3\\lib\\site-packages (from diffusers) (2.32.2)\n",
      "Requirement already satisfied: safetensors>=0.3.1 in c:\\users\\mark kevin\\anaconda3\\lib\\site-packages (from diffusers) (0.4.4)\n",
      "Requirement already satisfied: Pillow in c:\\users\\mark kevin\\anaconda3\\lib\\site-packages (from diffusers) (10.3.0)\n",
      "Requirement already satisfied: fsspec>=2023.5.0 in c:\\users\\mark kevin\\anaconda3\\lib\\site-packages (from huggingface-hub>=0.23.2->diffusers) (2024.3.1)\n",
      "Requirement already satisfied: packaging>=20.9 in c:\\users\\mark kevin\\anaconda3\\lib\\site-packages (from huggingface-hub>=0.23.2->diffusers) (23.2)\n",
      "Requirement already satisfied: pyyaml>=5.1 in c:\\users\\mark kevin\\anaconda3\\lib\\site-packages (from huggingface-hub>=0.23.2->diffusers) (6.0.1)\n",
      "Requirement already satisfied: tqdm>=4.42.1 in c:\\users\\mark kevin\\anaconda3\\lib\\site-packages (from huggingface-hub>=0.23.2->diffusers) (4.66.4)\n",
      "Requirement already satisfied: typing-extensions>=3.7.4.3 in c:\\users\\mark kevin\\anaconda3\\lib\\site-packages (from huggingface-hub>=0.23.2->diffusers) (4.12.2)\n",
      "Requirement already satisfied: zipp>=0.5 in c:\\users\\mark kevin\\anaconda3\\lib\\site-packages (from importlib-metadata->diffusers) (3.17.0)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in c:\\users\\mark kevin\\anaconda3\\lib\\site-packages (from requests->diffusers) (2.0.4)\n",
      "Requirement already satisfied: idna<4,>=2.5 in c:\\users\\mark kevin\\anaconda3\\lib\\site-packages (from requests->diffusers) (3.7)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in c:\\users\\mark kevin\\anaconda3\\lib\\site-packages (from requests->diffusers) (2.2.2)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in c:\\users\\mark kevin\\anaconda3\\lib\\site-packages (from requests->diffusers) (2024.6.2)\n",
      "Requirement already satisfied: colorama in c:\\users\\mark kevin\\anaconda3\\lib\\site-packages (from tqdm>=4.42.1->huggingface-hub>=0.23.2->diffusers) (0.4.6)\n",
      "Downloading diffusers-0.31.0-py3-none-any.whl (2.9 MB)\n",
      "   ---------------------------------------- 0.0/2.9 MB ? eta -:--:--\n",
      "   ---------------------------------------- 0.0/2.9 MB ? eta -:--:--\n",
      "   ---------------------------------------- 0.0/2.9 MB 640.0 kB/s eta 0:00:05\n",
      "    --------------------------------------- 0.1/2.9 MB 656.4 kB/s eta 0:00:05\n",
      "   - -------------------------------------- 0.1/2.9 MB 655.4 kB/s eta 0:00:05\n",
      "   - -------------------------------------- 0.1/2.9 MB 847.9 kB/s eta 0:00:04\n",
      "   - -------------------------------------- 0.1/2.9 MB 847.9 kB/s eta 0:00:04\n",
      "   -- ------------------------------------- 0.2/2.9 MB 577.4 kB/s eta 0:00:05\n",
      "   -- ------------------------------------- 0.2/2.9 MB 581.0 kB/s eta 0:00:05\n",
      "   -- ------------------------------------- 0.2/2.9 MB 581.0 kB/s eta 0:00:05\n",
      "   -- ------------------------------------- 0.2/2.9 MB 491.5 kB/s eta 0:00:06\n",
      "   -- ------------------------------------- 0.2/2.9 MB 491.5 kB/s eta 0:00:06\n",
      "   --- ------------------------------------ 0.2/2.9 MB 502.2 kB/s eta 0:00:06\n",
      "   --- ------------------------------------ 0.3/2.9 MB 449.3 kB/s eta 0:00:06\n",
      "   --- ------------------------------------ 0.3/2.9 MB 478.3 kB/s eta 0:00:06\n",
      "   --- ------------------------------------ 0.3/2.9 MB 478.3 kB/s eta 0:00:06\n",
      "   ---- ----------------------------------- 0.3/2.9 MB 441.9 kB/s eta 0:00:06\n",
      "   ---- ----------------------------------- 0.3/2.9 MB 441.9 kB/s eta 0:00:06\n",
      "   ----- ---------------------------------- 0.4/2.9 MB 458.3 kB/s eta 0:00:06\n",
      "   ----- ---------------------------------- 0.4/2.9 MB 458.3 kB/s eta 0:00:06\n",
      "   ----- ---------------------------------- 0.4/2.9 MB 464.4 kB/s eta 0:00:06\n",
      "   ------ --------------------------------- 0.4/2.9 MB 482.7 kB/s eta 0:00:06\n",
      "   ------ --------------------------------- 0.5/2.9 MB 483.5 kB/s eta 0:00:05\n",
      "   ------- -------------------------------- 0.5/2.9 MB 503.9 kB/s eta 0:00:05\n",
      "   ------- -------------------------------- 0.5/2.9 MB 503.9 kB/s eta 0:00:05\n",
      "   ------- -------------------------------- 0.6/2.9 MB 514.8 kB/s eta 0:00:05\n",
      "   ------- -------------------------------- 0.6/2.9 MB 514.8 kB/s eta 0:00:05\n",
      "   ------- -------------------------------- 0.6/2.9 MB 514.8 kB/s eta 0:00:05\n",
      "   -------- ------------------------------- 0.6/2.9 MB 487.2 kB/s eta 0:00:05\n",
      "   -------- ------------------------------- 0.6/2.9 MB 487.2 kB/s eta 0:00:05\n",
      "   -------- ------------------------------- 0.6/2.9 MB 475.7 kB/s eta 0:00:05\n",
      "   --------- ------------------------------ 0.7/2.9 MB 476.6 kB/s eta 0:00:05\n",
      "   --------- ------------------------------ 0.7/2.9 MB 487.6 kB/s eta 0:00:05\n",
      "   --------- ------------------------------ 0.7/2.9 MB 487.6 kB/s eta 0:00:05\n",
      "   --------- ------------------------------ 0.7/2.9 MB 487.6 kB/s eta 0:00:05\n",
      "   --------- ------------------------------ 0.7/2.9 MB 487.6 kB/s eta 0:00:05\n",
      "   --------- ------------------------------ 0.7/2.9 MB 487.6 kB/s eta 0:00:05\n",
      "   ---------- ----------------------------- 0.7/2.9 MB 443.0 kB/s eta 0:00:05\n",
      "   ---------- ----------------------------- 0.7/2.9 MB 436.8 kB/s eta 0:00:05\n",
      "   ---------- ----------------------------- 0.8/2.9 MB 442.7 kB/s eta 0:00:05\n",
      "   ---------- ----------------------------- 0.8/2.9 MB 442.7 kB/s eta 0:00:05\n",
      "   ----------- ---------------------------- 0.8/2.9 MB 446.2 kB/s eta 0:00:05\n",
      "   ----------- ---------------------------- 0.8/2.9 MB 446.2 kB/s eta 0:00:05\n",
      "   ----------- ---------------------------- 0.8/2.9 MB 446.2 kB/s eta 0:00:05\n",
      "   ----------- ---------------------------- 0.8/2.9 MB 446.2 kB/s eta 0:00:05\n",
      "   ----------- ---------------------------- 0.8/2.9 MB 446.2 kB/s eta 0:00:05\n",
      "   ----------- ---------------------------- 0.8/2.9 MB 446.2 kB/s eta 0:00:05\n",
      "   ------------- -------------------------- 0.9/2.9 MB 441.6 kB/s eta 0:00:05\n",
      "   ------------- -------------------------- 0.9/2.9 MB 441.6 kB/s eta 0:00:05\n",
      "   ------------- -------------------------- 1.0/2.9 MB 438.4 kB/s eta 0:00:05\n",
      "   ------------- -------------------------- 1.0/2.9 MB 439.8 kB/s eta 0:00:05\n",
      "   -------------- ------------------------- 1.0/2.9 MB 447.1 kB/s eta 0:00:05\n",
      "   -------------- ------------------------- 1.0/2.9 MB 447.1 kB/s eta 0:00:05\n",
      "   --------------- ------------------------ 1.1/2.9 MB 463.7 kB/s eta 0:00:04\n",
      "   --------------- ------------------------ 1.1/2.9 MB 463.7 kB/s eta 0:00:04\n",
      "   --------------- ------------------------ 1.1/2.9 MB 460.4 kB/s eta 0:00:04\n",
      "   ---------------- ----------------------- 1.2/2.9 MB 458.3 kB/s eta 0:00:04\n",
      "   ---------------- ----------------------- 1.2/2.9 MB 467.5 kB/s eta 0:00:04\n",
      "   ---------------- ----------------------- 1.2/2.9 MB 467.5 kB/s eta 0:00:04\n",
      "   ---------------- ----------------------- 1.2/2.9 MB 467.5 kB/s eta 0:00:04\n",
      "   ----------------- ---------------------- 1.2/2.9 MB 445.5 kB/s eta 0:00:04\n",
      "   ----------------- ---------------------- 1.3/2.9 MB 454.3 kB/s eta 0:00:04\n",
      "   ----------------- ---------------------- 1.3/2.9 MB 445.4 kB/s eta 0:00:04\n",
      "   ------------------ --------------------- 1.3/2.9 MB 463.0 kB/s eta 0:00:04\n",
      "   ------------------- -------------------- 1.4/2.9 MB 466.1 kB/s eta 0:00:04\n",
      "   -------------------- ------------------- 1.5/2.9 MB 486.3 kB/s eta 0:00:03\n",
      "   -------------------- ------------------- 1.5/2.9 MB 495.7 kB/s eta 0:00:03\n",
      "   --------------------- ------------------ 1.5/2.9 MB 498.1 kB/s eta 0:00:03\n",
      "   ---------------------- ----------------- 1.6/2.9 MB 516.9 kB/s eta 0:00:03\n",
      "   ---------------------- ----------------- 1.6/2.9 MB 519.0 kB/s eta 0:00:03\n",
      "   ----------------------- ---------------- 1.7/2.9 MB 520.4 kB/s eta 0:00:03\n",
      "   ----------------------- ---------------- 1.7/2.9 MB 520.4 kB/s eta 0:00:03\n",
      "   ----------------------- ---------------- 1.7/2.9 MB 520.4 kB/s eta 0:00:03\n",
      "   ----------------------- ---------------- 1.7/2.9 MB 520.4 kB/s eta 0:00:03\n",
      "   ----------------------- ---------------- 1.7/2.9 MB 520.4 kB/s eta 0:00:03\n",
      "   ----------------------- ---------------- 1.7/2.9 MB 520.4 kB/s eta 0:00:03\n",
      "   ----------------------- ---------------- 1.7/2.9 MB 520.4 kB/s eta 0:00:03\n",
      "   ----------------------- ---------------- 1.7/2.9 MB 520.4 kB/s eta 0:00:03\n",
      "   ----------------------- ---------------- 1.7/2.9 MB 520.4 kB/s eta 0:00:03\n",
      "   ------------------------ --------------- 1.8/2.9 MB 489.4 kB/s eta 0:00:03\n",
      "   ------------------------- -------------- 1.8/2.9 MB 488.0 kB/s eta 0:00:03\n",
      "   ------------------------- -------------- 1.8/2.9 MB 489.5 kB/s eta 0:00:03\n",
      "   ------------------------- -------------- 1.9/2.9 MB 487.4 kB/s eta 0:00:03\n",
      "   -------------------------- ------------- 1.9/2.9 MB 491.5 kB/s eta 0:00:03\n",
      "   --------------------------- ------------ 2.0/2.9 MB 502.1 kB/s eta 0:00:02\n",
      "   --------------------------- ------------ 2.0/2.9 MB 505.8 kB/s eta 0:00:02\n",
      "   --------------------------- ------------ 2.0/2.9 MB 504.5 kB/s eta 0:00:02\n",
      "   ---------------------------- ----------- 2.0/2.9 MB 507.4 kB/s eta 0:00:02\n",
      "   ---------------------------- ----------- 2.0/2.9 MB 507.4 kB/s eta 0:00:02\n",
      "   ----------------------------- ---------- 2.1/2.9 MB 508.3 kB/s eta 0:00:02\n",
      "   ----------------------------- ---------- 2.1/2.9 MB 508.3 kB/s eta 0:00:02\n",
      "   ----------------------------- ---------- 2.1/2.9 MB 504.3 kB/s eta 0:00:02\n",
      "   ----------------------------- ---------- 2.1/2.9 MB 504.3 kB/s eta 0:00:02\n",
      "   ------------------------------ --------- 2.2/2.9 MB 502.2 kB/s eta 0:00:02\n",
      "   ------------------------------ --------- 2.2/2.9 MB 502.2 kB/s eta 0:00:02\n",
      "   ------------------------------ --------- 2.2/2.9 MB 502.2 kB/s eta 0:00:02\n",
      "   ------------------------------ --------- 2.2/2.9 MB 490.9 kB/s eta 0:00:02\n",
      "   ------------------------------ --------- 2.2/2.9 MB 490.9 kB/s eta 0:00:02\n",
      "   ------------------------------- -------- 2.2/2.9 MB 492.0 kB/s eta 0:00:02\n",
      "   ------------------------------- -------- 2.3/2.9 MB 493.7 kB/s eta 0:00:02\n",
      "   -------------------------------- ------- 2.3/2.9 MB 500.4 kB/s eta 0:00:02\n",
      "   -------------------------------- ------- 2.4/2.9 MB 505.7 kB/s eta 0:00:02\n",
      "   -------------------------------- ------- 2.4/2.9 MB 505.7 kB/s eta 0:00:02\n",
      "   ---------------------------------- ----- 2.4/2.9 MB 511.4 kB/s eta 0:00:01\n",
      "   ---------------------------------- ----- 2.4/2.9 MB 511.4 kB/s eta 0:00:01\n",
      "   ---------------------------------- ----- 2.5/2.9 MB 511.6 kB/s eta 0:00:01\n",
      "   ----------------------------------- ---- 2.5/2.9 MB 518.3 kB/s eta 0:00:01\n",
      "   ----------------------------------- ---- 2.6/2.9 MB 518.4 kB/s eta 0:00:01\n",
      "   ----------------------------------- ---- 2.6/2.9 MB 518.4 kB/s eta 0:00:01\n",
      "   ----------------------------------- ---- 2.6/2.9 MB 518.4 kB/s eta 0:00:01\n",
      "   ----------------------------------- ---- 2.6/2.9 MB 518.4 kB/s eta 0:00:01\n",
      "   ------------------------------------ --- 2.6/2.9 MB 507.5 kB/s eta 0:00:01\n",
      "   ------------------------------------ --- 2.6/2.9 MB 503.3 kB/s eta 0:00:01\n",
      "   ------------------------------------- -- 2.7/2.9 MB 508.6 kB/s eta 0:00:01\n",
      "   ------------------------------------- -- 2.7/2.9 MB 511.0 kB/s eta 0:00:01\n",
      "   -------------------------------------- - 2.8/2.9 MB 516.5 kB/s eta 0:00:01\n",
      "   -------------------------------------- - 2.8/2.9 MB 517.4 kB/s eta 0:00:01\n",
      "   -------------------------------------- - 2.8/2.9 MB 517.4 kB/s eta 0:00:01\n",
      "   ---------------------------------------  2.8/2.9 MB 512.7 kB/s eta 0:00:01\n",
      "   ---------------------------------------  2.9/2.9 MB 520.5 kB/s eta 0:00:01\n",
      "   ---------------------------------------  2.9/2.9 MB 520.5 kB/s eta 0:00:01\n",
      "   ---------------------------------------  2.9/2.9 MB 510.7 kB/s eta 0:00:01\n",
      "   ---------------------------------------- 2.9/2.9 MB 510.4 kB/s eta 0:00:00\n",
      "Installing collected packages: diffusers\n",
      "Successfully installed diffusers-0.31.0\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install diffusers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "accelerator": "GPU",
  "colab": {
   "gpuType": "T4",
   "provenance": [],
   "toc_visible": true
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "02746db0ee2e4811926d9faf3098d50f": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "HTMLModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "HTMLModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "HTMLView",
      "description": "",
      "description_tooltip": null,
      "layout": "IPY_MODEL_9fb2d8182baa4dd1bd09f82c623d0f0b",
      "placeholder": "​",
      "style": "IPY_MODEL_da1ee73e6f4b4f0f8af25dec5c1207e1",
      "value": " 232k/232k [00:00&lt;00:00, 3.76MB/s]"
     }
    },
    "04bf2400278e46ef8a19935e50d8f487": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "ProgressStyleModel",
     "state": {
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "ProgressStyleModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "StyleView",
      "bar_color": null,
      "description_width": ""
     }
    },
    "17663b2286464fb9ae0eed7723e07694": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "ProgressStyleModel",
     "state": {
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "ProgressStyleModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "StyleView",
      "bar_color": null,
      "description_width": ""
     }
    },
    "187d24de176f403bae84589da6bd4c53": {
     "model_module": "@jupyter-widgets/base",
     "model_module_version": "1.2.0",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "275f99291d294b35ade36b86f8549024": {
     "model_module": "@jupyter-widgets/base",
     "model_module_version": "1.2.0",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "2856e5109d334d84878f40b160ef81b2": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "HBoxModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "HBoxModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "HBoxView",
      "box_style": "",
      "children": [
       "IPY_MODEL_cf4d84cf5b384d6a91f259ceac69c217",
       "IPY_MODEL_311a9ffefe444f5b9ba566c4d27ac4f4",
       "IPY_MODEL_02746db0ee2e4811926d9faf3098d50f"
      ],
      "layout": "IPY_MODEL_da9cf139fbdd47ba94d84b6ff9a2d51c"
     }
    },
    "311a9ffefe444f5b9ba566c4d27ac4f4": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "FloatProgressModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "FloatProgressModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "ProgressView",
      "bar_style": "success",
      "description": "",
      "description_tooltip": null,
      "layout": "IPY_MODEL_369c23c1e1bc4ddaa76e06ef4555e6f4",
      "max": 231508,
      "min": 0,
      "orientation": "horizontal",
      "style": "IPY_MODEL_a0c562cf20944ae3b10cbc31db01055b",
      "value": 231508
     }
    },
    "369c23c1e1bc4ddaa76e06ef4555e6f4": {
     "model_module": "@jupyter-widgets/base",
     "model_module_version": "1.2.0",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "384fb861dbbf4f448cd9a361d165a39e": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "FloatProgressModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "FloatProgressModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "ProgressView",
      "bar_style": "success",
      "description": "",
      "description_tooltip": null,
      "layout": "IPY_MODEL_777c56c93e5e4afc9c09c5d701971f7f",
      "max": 267832558,
      "min": 0,
      "orientation": "horizontal",
      "style": "IPY_MODEL_dc5f4684542f482d89cf3d2794f07b73",
      "value": 267832558
     }
    },
    "3dac97b7ab924652858f0402389ee5bd": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "HBoxModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "HBoxModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "HBoxView",
      "box_style": "",
      "children": [
       "IPY_MODEL_ba4d80d70b2f47e18800606d3286df12",
       "IPY_MODEL_5f1095339994462080f663d2e4f3c633",
       "IPY_MODEL_581b6df773ab4e8a9af21489c227739f"
      ],
      "layout": "IPY_MODEL_768c66a1ed66436aa1c341dfdfaa6c67"
     }
    },
    "471d001b6a2c4faa86d27d5701d714b4": {
     "model_module": "@jupyter-widgets/base",
     "model_module_version": "1.2.0",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "47a7932be8244db9b4091aa7b21f524a": {
     "model_module": "@jupyter-widgets/base",
     "model_module_version": "1.2.0",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "581b6df773ab4e8a9af21489c227739f": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "HTMLModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "HTMLModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "HTMLView",
      "description": "",
      "description_tooltip": null,
      "layout": "IPY_MODEL_275f99291d294b35ade36b86f8549024",
      "placeholder": "​",
      "style": "IPY_MODEL_f906b2834aaf4c238b6ac5406301c6c4",
      "value": " 48.0/48.0 [00:00&lt;00:00, 3.18kB/s]"
     }
    },
    "5f1095339994462080f663d2e4f3c633": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "FloatProgressModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "FloatProgressModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "ProgressView",
      "bar_style": "success",
      "description": "",
      "description_tooltip": null,
      "layout": "IPY_MODEL_471d001b6a2c4faa86d27d5701d714b4",
      "max": 48,
      "min": 0,
      "orientation": "horizontal",
      "style": "IPY_MODEL_04bf2400278e46ef8a19935e50d8f487",
      "value": 48
     }
    },
    "6e0aa4fbce5543a790363bd889921cf5": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "HTMLModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "HTMLModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "HTMLView",
      "description": "",
      "description_tooltip": null,
      "layout": "IPY_MODEL_f07ada3e706a41fa895acaef1b8dbbd8",
      "placeholder": "​",
      "style": "IPY_MODEL_c81c7f767ac4465abb9de1cf54ce15b3",
      "value": "config.json: 100%"
     }
    },
    "768c66a1ed66436aa1c341dfdfaa6c67": {
     "model_module": "@jupyter-widgets/base",
     "model_module_version": "1.2.0",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "776875522ba64d62a5acbf6807b646e5": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "HTMLModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "HTMLModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "HTMLView",
      "description": "",
      "description_tooltip": null,
      "layout": "IPY_MODEL_e98be0b4bf724afb989708d2b3412b7e",
      "placeholder": "​",
      "style": "IPY_MODEL_ad42d00100bb4499a143f341bb3d251b",
      "value": " 268M/268M [00:01&lt;00:00, 237MB/s]"
     }
    },
    "777c56c93e5e4afc9c09c5d701971f7f": {
     "model_module": "@jupyter-widgets/base",
     "model_module_version": "1.2.0",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "86e6795eccdf4daf8502819a88a6d421": {
     "model_module": "@jupyter-widgets/base",
     "model_module_version": "1.2.0",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "9608df2eed1c49aa8ea312a3abd4c0c1": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "HTMLModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "HTMLModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "HTMLView",
      "description": "",
      "description_tooltip": null,
      "layout": "IPY_MODEL_dcda7293eaad490098b37bda487506e6",
      "placeholder": "​",
      "style": "IPY_MODEL_e4ce4cf630104b3c9f02c43ab4b07823",
      "value": "model.safetensors: 100%"
     }
    },
    "97cab477c0c34e02aa34437246464d7c": {
     "model_module": "@jupyter-widgets/base",
     "model_module_version": "1.2.0",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "9fb2d8182baa4dd1bd09f82c623d0f0b": {
     "model_module": "@jupyter-widgets/base",
     "model_module_version": "1.2.0",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "a0c562cf20944ae3b10cbc31db01055b": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "ProgressStyleModel",
     "state": {
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "ProgressStyleModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "StyleView",
      "bar_color": null,
      "description_width": ""
     }
    },
    "a5fd31d53fa744889d97920f28255f1c": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "HTMLModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "HTMLModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "HTMLView",
      "description": "",
      "description_tooltip": null,
      "layout": "IPY_MODEL_187d24de176f403bae84589da6bd4c53",
      "placeholder": "​",
      "style": "IPY_MODEL_db8cf6116cd94b18bea64c992ab892d4",
      "value": " 629/629 [00:00&lt;00:00, 36.3kB/s]"
     }
    },
    "aa031a66b98e42d983258ba0ba2346f7": {
     "model_module": "@jupyter-widgets/base",
     "model_module_version": "1.2.0",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "ad42d00100bb4499a143f341bb3d251b": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "DescriptionStyleModel",
     "state": {
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "DescriptionStyleModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "StyleView",
      "description_width": ""
     }
    },
    "b13fc2c885144a62ab85a52122c54e22": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "DescriptionStyleModel",
     "state": {
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "DescriptionStyleModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "StyleView",
      "description_width": ""
     }
    },
    "ba4d80d70b2f47e18800606d3286df12": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "HTMLModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "HTMLModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "HTMLView",
      "description": "",
      "description_tooltip": null,
      "layout": "IPY_MODEL_dd3ca54ca79a4207ae73bdbb48b7ea14",
      "placeholder": "​",
      "style": "IPY_MODEL_f706b1ff89d94a9fa24181084c1a3ba6",
      "value": "tokenizer_config.json: 100%"
     }
    },
    "bb372bac164f41458e90d03045cf33a5": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "FloatProgressModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "FloatProgressModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "ProgressView",
      "bar_style": "success",
      "description": "",
      "description_tooltip": null,
      "layout": "IPY_MODEL_97cab477c0c34e02aa34437246464d7c",
      "max": 629,
      "min": 0,
      "orientation": "horizontal",
      "style": "IPY_MODEL_17663b2286464fb9ae0eed7723e07694",
      "value": 629
     }
    },
    "c81c7f767ac4465abb9de1cf54ce15b3": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "DescriptionStyleModel",
     "state": {
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "DescriptionStyleModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "StyleView",
      "description_width": ""
     }
    },
    "cf4d84cf5b384d6a91f259ceac69c217": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "HTMLModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "HTMLModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "HTMLView",
      "description": "",
      "description_tooltip": null,
      "layout": "IPY_MODEL_47a7932be8244db9b4091aa7b21f524a",
      "placeholder": "​",
      "style": "IPY_MODEL_b13fc2c885144a62ab85a52122c54e22",
      "value": "vocab.txt: 100%"
     }
    },
    "cfae7adec6004f2581033d9e09207d9e": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "HBoxModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "HBoxModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "HBoxView",
      "box_style": "",
      "children": [
       "IPY_MODEL_6e0aa4fbce5543a790363bd889921cf5",
       "IPY_MODEL_bb372bac164f41458e90d03045cf33a5",
       "IPY_MODEL_a5fd31d53fa744889d97920f28255f1c"
      ],
      "layout": "IPY_MODEL_aa031a66b98e42d983258ba0ba2346f7"
     }
    },
    "da1ee73e6f4b4f0f8af25dec5c1207e1": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "DescriptionStyleModel",
     "state": {
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "DescriptionStyleModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "StyleView",
      "description_width": ""
     }
    },
    "da9cf139fbdd47ba94d84b6ff9a2d51c": {
     "model_module": "@jupyter-widgets/base",
     "model_module_version": "1.2.0",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "db8cf6116cd94b18bea64c992ab892d4": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "DescriptionStyleModel",
     "state": {
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "DescriptionStyleModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "StyleView",
      "description_width": ""
     }
    },
    "dc5f4684542f482d89cf3d2794f07b73": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "ProgressStyleModel",
     "state": {
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "ProgressStyleModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "StyleView",
      "bar_color": null,
      "description_width": ""
     }
    },
    "dcda7293eaad490098b37bda487506e6": {
     "model_module": "@jupyter-widgets/base",
     "model_module_version": "1.2.0",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "dd3ca54ca79a4207ae73bdbb48b7ea14": {
     "model_module": "@jupyter-widgets/base",
     "model_module_version": "1.2.0",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "e4ce4cf630104b3c9f02c43ab4b07823": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "DescriptionStyleModel",
     "state": {
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "DescriptionStyleModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "StyleView",
      "description_width": ""
     }
    },
    "e98be0b4bf724afb989708d2b3412b7e": {
     "model_module": "@jupyter-widgets/base",
     "model_module_version": "1.2.0",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "f07ada3e706a41fa895acaef1b8dbbd8": {
     "model_module": "@jupyter-widgets/base",
     "model_module_version": "1.2.0",
     "model_name": "LayoutModel",
     "state": {
      "_model_module": "@jupyter-widgets/base",
      "_model_module_version": "1.2.0",
      "_model_name": "LayoutModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "LayoutView",
      "align_content": null,
      "align_items": null,
      "align_self": null,
      "border": null,
      "bottom": null,
      "display": null,
      "flex": null,
      "flex_flow": null,
      "grid_area": null,
      "grid_auto_columns": null,
      "grid_auto_flow": null,
      "grid_auto_rows": null,
      "grid_column": null,
      "grid_gap": null,
      "grid_row": null,
      "grid_template_areas": null,
      "grid_template_columns": null,
      "grid_template_rows": null,
      "height": null,
      "justify_content": null,
      "justify_items": null,
      "left": null,
      "margin": null,
      "max_height": null,
      "max_width": null,
      "min_height": null,
      "min_width": null,
      "object_fit": null,
      "object_position": null,
      "order": null,
      "overflow": null,
      "overflow_x": null,
      "overflow_y": null,
      "padding": null,
      "right": null,
      "top": null,
      "visibility": null,
      "width": null
     }
    },
    "f3feb06cd13a4abd8622933030f30064": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "HBoxModel",
     "state": {
      "_dom_classes": [],
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "HBoxModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/controls",
      "_view_module_version": "1.5.0",
      "_view_name": "HBoxView",
      "box_style": "",
      "children": [
       "IPY_MODEL_9608df2eed1c49aa8ea312a3abd4c0c1",
       "IPY_MODEL_384fb861dbbf4f448cd9a361d165a39e",
       "IPY_MODEL_776875522ba64d62a5acbf6807b646e5"
      ],
      "layout": "IPY_MODEL_86e6795eccdf4daf8502819a88a6d421"
     }
    },
    "f706b1ff89d94a9fa24181084c1a3ba6": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "DescriptionStyleModel",
     "state": {
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "DescriptionStyleModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "StyleView",
      "description_width": ""
     }
    },
    "f906b2834aaf4c238b6ac5406301c6c4": {
     "model_module": "@jupyter-widgets/controls",
     "model_module_version": "1.5.0",
     "model_name": "DescriptionStyleModel",
     "state": {
      "_model_module": "@jupyter-widgets/controls",
      "_model_module_version": "1.5.0",
      "_model_name": "DescriptionStyleModel",
      "_view_count": null,
      "_view_module": "@jupyter-widgets/base",
      "_view_module_version": "1.2.0",
      "_view_name": "StyleView",
      "description_width": ""
     }
    }
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
